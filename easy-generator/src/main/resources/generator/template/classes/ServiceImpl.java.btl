package ${config.serviceImplPackage};

<% for(import in serviceImpl.imports!){ %>
import ${import};
<% } %>

/**
 * ${config.businessName}
 *
 * @author ${config.author}
 * @date ${config.date}
 */
@Service
public class ${config.modelName}ServiceImpl extends ServiceImpl<${config.modelName}Mapper, ${config.modelName}> implements ${config.modelName}Service {

    @Autowired
    private ${config.modelName}Mapper mapper;

    <% if(config.genSelect){ %>
    @Override
    public Object select(${config.modelName} object) {
        Page page = object.getPage();
        QueryWrapper<${config.modelName}> queryWrapper = new QueryWrapper<>();
        if(object != null){
            // 拼接查询条件

        }

        page(page, queryWrapper);
        return page;
    }

    @Override
    public ${config.modelName} input(Long id) {
        ToolUtil.checkParams(id);
        return getById(id);
    }
    <% } %>
    <% if(config.genAdd){ %>
    @Override
    public ${config.modelName} add() {
        ${config.modelName} object = new ${config.modelName}();
        // 设置默认值
        return object;
    }
    <% } %>
    <% if(config.genDelete){ %>
    @Transactional(rollbackFor = RuntimeException.class)
    @Override
    public boolean delete(String ids) {
        ToolUtil.checkParams(ids);
        List<String> idList = Arrays.asList(ids.split(","));
        return ToolUtil.checkResult(removeByIds(idList));
    }
    <% } %>
    <% if(config.genSave){ %>
        @Transactional(rollbackFor = RuntimeException.class)
        @Override
        public ${config.modelName} saveData(${config.modelName} object) {
            ToolUtil.checkParams(object);
            if (object.getId() == null) {
                // 新增,设置默认值
            }
            return (${config.modelName}) ToolUtil.checkResult(saveOrUpdate(object), object);
        }
    <% } %>
}